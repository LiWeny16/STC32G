C251 COMPILER V5.60.0,  Pid                                                                09/04/23  22:44:27  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Pid
OBJECT MODULE PLACED IN .\Out\Pid.obj
COMPILER INVOKED BY: C:\Learning\Keil_v5\body\C251\BIN\C251.EXE User\User_c\Pid.c XSMALL INTR2 BROWSE INCDIR(.\Lib\libra
                    -ries;.\Lib\seekfree_libraries;.\Lib\seekfree_peripheral;.\User\User_h) DEBUG PRINT(.\Listings\Pid.lst) TABS(2) OBJECT(.\
                    -Out\Pid.obj) 

stmt  level    source

    1          // 该文件用于使用舵机偏差结构体和电机偏差结构体计算舵机PID输出值和电机PID增量值
    2          
    3          #include "Pid.h"
    4          float constrain_float(float amt, float low, float high) // 限幅用，low和high为上下限
    5          {
    6   1        return ((amt) < (low) ? (low) : ((amt) > (high) ? (high) : (amt)));
    7   1      }
    8          
    9          uint32 constrain_uint32(uint32 amt, uint32 low, uint32 high) // 限幅用，low和high为上下限
   10          {
   11   1        return ((amt) < (low) ? (low) : ((amt) > (high) ? (high) : (amt)));
   12   1      }
   13          
   14          int32 constrain_int32(int32 amt, int32 low, int32 high) // 限幅用，low和high为上下限
   15          {
   16   1        return ((amt) < (low) ? (low) : ((amt) > (high) ? (high) : (amt)));
   17   1      }
   18          
   19          void Pid_Steering_Calculate(Road road, volatile Err_Steering *err_steering, volatile PID_Steering *pid_st
             -eering) // 舵机位置式PID输出值
   20          {
   21   1      
   22   1        //   constrain_float(err_steering->Errsum, pid_steering->imax, pid_steering->imin);
   23   1        // 位置式PID积分项限幅
   24   1        float p_Str;
   25   1        float i_Str;
   26   1        float d_Str;
   27   1        
   28   1        float p_Curve_L;
   29   1        float i_Curve_L;
   30   1        float d_Curve_L;
   31   1      
   32   1        float p_Curve_R;
   33   1        float i_Curve_R;
   34   1        float d_Curve_R;
   35   1        
   36   1        float p_Ring_R;
   37   1        float i_Ring_R;
   38   1        float d_Ring_R;
   39   1        
   40   1        float p_Ring_L;
   41   1        float i_Ring_L;
   42   1        float d_Ring_L;
   43   1        // 直线
   44   1        p_Str= 13.3;
   45   1        i_Str=1.0;
   46   1        d_Str=0.378;
   47   1        
   48   1        // 曲线左
   49   1        p_Curve_L = 20.5;
   50   1        i_Curve_L = 0.8;
   51   1        d_Curve_L = 1.378;
   52   1        // 曲线右
   53   1        p_Curve_R = 19.5;
   54   1        i_Curve_R = 0.8;
   55   1        d_Curve_R = 1.378;
   56   1        
C251 COMPILER V5.60.0,  Pid                                                                09/04/23  22:44:27  PAGE 2   

   57   1        // 环左
   58   1        p_Ring_L = 22.8;
   59   1        i_Ring_L = 0.10;
   60   1        d_Ring_L = 1.82;
   61   1        // 环右
   62   1        p_Ring_R = 30.8;
   63   1        i_Ring_R = 0.10;
   64   1        d_Ring_R = 1.82;
   65   1        switch (road)
   66   1        {
   67   2        case (Straight): // 直道
   68   2          err_steering->Err=(0.4151 * (err_steering->Err_x)) + (3.4868 * (err_steering->Err_h));
   69   2          err_steering->Errsum += err_steering->Err;
   70   2          err_steering->Errsum = err_steering->Errsum>2?2:err_steering->Errsum;
   71   2          err_steering->Errsum = err_steering->Errsum<-2?-2:err_steering->Errsum;
   72   2          err_steering->Errdif = err_steering->Err - err_steering->Err_last;
   73   2          err_steering->Err_last = err_steering->Err;
   74   2          pid_steering->STEERING_OUT_temp = (float)((p_Str * err_steering->Err) + (i_Str * err_steering->Errsum) 
             -+ (d_Str * err_steering->Errdif));
   75   2          break;
   76   2      
   77   2        case (Curve_Left): // 弯道
   78   2          err_steering->Err=(0.9151 * (err_steering->Err_x)) + (4.5868 * (err_steering->Err_h));
   79   2          err_steering->Errsum += err_steering->Err;
   80   2          err_steering->Errsum = err_steering->Errsum>2?2:err_steering->Errsum;
   81   2          err_steering->Errsum = err_steering->Errsum<-2?-2:err_steering->Errsum;
   82   2          err_steering->Errdif = err_steering->Err - err_steering->Err_last;
   83   2          err_steering->Err_last = err_steering->Err;
   84   2          pid_steering->STEERING_OUT_temp = (float)((p_Curve_L * err_steering->Err) + (i_Curve_L * err_steering->
             -Errsum) + (d_Curve_L * err_steering->Errdif));
   85   2          break;
   86   2      
   87   2        case (Curve_Right): // 弯道
   88   2          err_steering->Err=(0.9151 * (err_steering->Err_x)) + (4.5868 * (err_steering->Err_h));
   89   2          err_steering->Errsum += err_steering->Err;
   90   2          err_steering->Errsum = err_steering->Errsum>2?2:err_steering->Errsum;
   91   2          err_steering->Errsum = err_steering->Errsum<-2?-2:err_steering->Errsum;
   92   2          err_steering->Errdif = err_steering->Err - err_steering->Err_last;
   93   2          err_steering->Err_last = err_steering->Err;
   94   2          pid_steering->STEERING_OUT_temp = (float)((p_Curve_R * err_steering->Err) + (i_Curve_R * err_steering->
             -Errsum) + (d_Curve_R * err_steering->Errdif));
   95   2          break;
   96   2        case (Ring_Left):
   97   2          err_steering->Err=(1.2551 * (err_steering->Err_x)) + (4.5868 * (err_steering->Err_h));
   98   2          err_steering->Errsum += err_steering->Err;
   99   2          err_steering->Errsum = err_steering->Errsum>2?2:err_steering->Errsum;
  100   2          err_steering->Errsum = err_steering->Errsum<-2?-2:err_steering->Errsum;
  101   2          err_steering->Errdif = err_steering->Err - err_steering->Err_last;
  102   2          err_steering->Err_last = err_steering->Err;
  103   2          pid_steering->STEERING_OUT_temp = (float)((p_Ring_L * err_steering->Err) + (i_Ring_L * err_steering->Er
             -rsum) + (d_Ring_L * err_steering->Errdif));
  104   2          break;
  105   2        case (Ring_Right):
  106   2          err_steering->Err=(1.2551 * (err_steering->Err_x)) + (4.5868 * (err_steering->Err_h));
  107   2          err_steering->Errsum += err_steering->Err;
  108   2          err_steering->Errsum = err_steering->Errsum>2?2:err_steering->Errsum;
  109   2          err_steering->Errsum = err_steering->Errsum<-2?-2:err_steering->Errsum;
  110   2          err_steering->Errdif = err_steering->Err - err_steering->Err_last;
  111   2          err_steering->Err_last = err_steering->Err;
  112   2          pid_steering->STEERING_OUT_temp = (float)((p_Ring_R * err_steering->Err) + (i_Ring_R * err_steering->Er
             -rsum) + (d_Ring_R * err_steering->Errdif));
  113   2          break;
  114   2        
  115   2        case (Stop):
  116   2          pid_steering->STEERING_OUT_temp = 0.0;
  117   2          break;
C251 COMPILER V5.60.0,  Pid                                                                09/04/23  22:44:27  PAGE 3   

  118   2        default: // 别的
  119   2          err_steering->Err=(0.4151 * (err_steering->Err_x)) + (3.4868 * (err_steering->Err_h));
  120   2          err_steering->Errsum += err_steering->Err;
  121   2          err_steering->Errsum = err_steering->Errsum>2?2:err_steering->Errsum;
  122   2          err_steering->Errsum = err_steering->Errsum<-2?-2:err_steering->Errsum;
  123   2          err_steering->Errdif = err_steering->Err - err_steering->Err_last;
  124   2          err_steering->Err_last = err_steering->Err;
  125   2          pid_steering->STEERING_OUT_temp = (float)((p_Str * err_steering->Err) + (i_Str * err_steering->Errsum) 
             -+ (d_Str * err_steering->Errdif));
  126   2          break;
  127   2        }
  128   1        //err_steering->Errsum += err_steering->Err;
  129   1        //err_steering->Errdif = err_steering->Err - err_steering->Err_last;
  130   1        //err_steering->Err_last = err_steering->Err;
  131   1        // tempVar =(float)((pid_steering->p_steering * err_steering-> Err) + (pid_steering->i_steering * err_st
             -eering-> Errsum) + (pid_steering->d_steering * err_steering-> Errdif));
  132   1        // pid_steering->PID_STEERING_OUT = (f)(((pid_steering->p_steering * err_steering-> Err*(-1.0)) + (pid_s
             -teering->i_steering * err_steering-> Errsum*0) + (pid_steering->d_steering * err_steering-> Errdif)*0));
  133   1        //  temp =   pid_steering->PID_STEERING_OUT
  134   1        // 位置式PID输出计算
  135   1      }
  136          
  137          void Pid_Motor_Calculate(Err_Motor *err_motor, PID_Motor *pid_motor) // 电机增量式PID输出增量
  138          {
  139   1        pid_motor->MOTOR_L_OUT_temp= (pid_motor->p_motor * err_motor->err_derivative_L_m) + (pid_motor->i_motor 
             -* err_motor->err_L_m) + (pid_motor->d_motor * err_motor->err_derivative2_L_m);
  140   1        pid_motor->MOTOR_R_OUT_temp = (pid_motor->p_motor * err_motor->err_derivative_R_m) + (pid_motor->i_motor
             - * err_motor->err_R_m) + (pid_motor->d_motor * err_motor->err_derivative2_R_m);
  141   1      
  142   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1870     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         16
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
