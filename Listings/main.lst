C251 COMPILER V5.60.0,  main                                                               17/03/23  22:09:03  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Out\main.obj
COMPILER INVOKED BY: C:\Learning\Keil_v5\body\C251\BIN\C251.EXE User\User_c\main.c XSMALL INTR2 BROWSE INCDIR(.\Lib\libr
                    -aries;.\Lib\seekfree_libraries;.\Lib\seekfree_peripheral;.\User\User_h) DEBUG PRINT(.\Listings\main.lst) TABS(2) OBJECT(
                    -.\Out\main.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file          main
   11           * @company       成都逐飞科技有限公司
   12           * @author        逐飞科技(QQ790875685)
   13           * @version       查看doc内version文件 版本说明
   14           * @Software    MDK FOR C251 V5.60
   15           * @Target core   STC32G12K128
   16           * @Taobao      https://seekfree.taobao.com/
   17           * @date          2020-12-18
   18           ********************************************************************************************************
             -************/
   19          
   20          #include "headfile.h"
   21          #include "Allinit.h"
   22          
   23          // #include "All_init.h"
   24          
   25          /*
   26           * 系统频率，可查看board.h中的 FOSC 宏定义修改。
   27           * board.h文件中FOSC的值设置为0,则程序自动设置系统频率为33.1776MHZ
   28           * 在board_init中,已经将P54引脚设置为复位
   29           * 如果需要使用P54引脚,可以在board.c文件中的board_init()函数中删除SET_P54_RESRT即可
   30           */
   31          uint16 adc_data[10];
   32          void main()
   33          {
   34   1        DisableGlobalIRQ();
   35   1        board_init(); // 初始化寄存器,勿删除此句代码。
   36   1        ALL_init();
   37   1        delay_ms(1000);
   38   1        // pwm_init(PWMA_CH1P_P60, 10000, 0);
   39   1        // pwm_init(PWMA_CH2P_P62, 10000, 0);
   40   1        // pwm_init(PWMA_CH3P_P64, 10000, 0);
   41   1        // pwm_init(PWMA_CH4P_P66, 10000, 0);
   42   1        EnableGlobalIRQ();
   43   1        while (1)
   44   1        {
   45   2          delay_ms(1000);
   46   2          // P52 = !P52;
   47   2          // pwm_duty(PWMA_CH1P_P60, 0);
   48   2          // pwm_duty(PWMA_CH2P_P62, 1000); // right
   49   2          // pwm_duty(PWMA_CH3P_P64, 0);
   50   2          // pwm_duty(PWMA_CH4P_P66, 1000);
   51   2      
   52   2          //  adc_data[3] = adc_once(ADC_P00, ADC_12BIT); // 采集一次ADC，精度12位
   53   2          //  adc_data[4] = adc_once(ADC_P01, ADC_12BIT); // 采集一次ADC，精度12位
   54   2          //  adc_data[5] = adc_once(ADC_P05, ADC_12BIT); // 采集一次ADC，精度12位
   55   2          // adc_data[6] = adc_once(ADC_P06, ADC_12BIT); // 采集一次ADC，精度12位
C251 COMPILER V5.60.0,  main                                                               17/03/23  22:09:03  PAGE 2   

   56   2          //  printf("adc_data[3] = %d\r\n", adc_data[3]);
   57   2          // printf("adc_data[4] = %d\r\n", adc_data[4]);
   58   2          // printf("adc_data[5] = %d\r\n", adc_data[5]);
   59   2          // printf("adc_data[6] = %d\r\n", adc_data[6]);
   60   2          //  Err_x; // 斜电感偏差
   61   2          // Err_h; // 横电感偏差
   62   2          // Err_s; // 竖电感偏差 没用
   63   2      
   64   2          // Err; // 根据当前电感输出计算出的总偏差值
   65   2          // Err_last;
   66   2          printf("DG_State.L_yx_real = %d\r\n", dg_state.L_yx_real);
   67   2          printf("DG_State.L_zx_real = %d\r\n", dg_state.L_zx_real);
   68   2      
   69   2          printf("DG_State.L_yh_real = %d\r\n", dg_state.L_yh_real);
   70   2          printf("DG_State.L_zh_real = %d\r\n", dg_state.L_zh_real);
   71   2      
   72   2          printf("DG_State.L_zx_once = %f\r\n", dg_state.L_zx_once);
   73   2          printf("DG_State.L_zh_once = %f\r\n", dg_state.L_zh_once);
   74   2      
   75   2          printf("DG_State.L_yx_once = %f\r\n", dg_state.L_yx_once);
   76   2          printf("DG_State.L_yh_once = %f\r\n", dg_state.L_yh_once);
   77   2      
   78   2          printf("dg_state.L_zx_max = %f\r\n", dg_state.L_zx_max);
   79   2          printf("dg_state.L_zh_max = %f\r\n", dg_state.L_zh_max);
   80   2      
   81   2          printf("dg_state.L_yh_max = %f\r\n", dg_state.L_yh_max);
   82   2          printf("dg_state.L_yx_max = %f\r\n", dg_state.L_yx_max);
   83   2      
   84   2          printf("err_steering.Err_x = %f\r\n", err_steering.Err_x);
   85   2          printf("err_steering.Err_h = %f\r\n", err_steering.Err_h);
   86   2      
   87   2          printf("pid_steering.p_steering = %f\r\n", pid_steering.p_steering);
   88   2          printf("pid_steering.i_steering= %f\r\n", pid_steering.i_steering);
   89   2          printf("pid_steering.d_steering= %f\r\n", pid_steering.d_steering);
   90   2          printf("pid_steering.imax= %f\r\n", pid_steering.imax);
   91   2          // printf("err_steering.Err_x = %d\r\n", err_steering.Err_x);
   92   2          // printf("err_steering.Err_h = %d\r\n", err_steering.Err_h);
   93   2      
   94   2          printf("err_steering.Err = %f\r\n", err_steering.Err);
   95   2          printf("err_steering.Err_last = %f\r\n", err_steering.Err_last);
   96   2          printf("err_steering.Errsum = %f\r\n",err_steering.Errsum);
   97   2          printf("err_steering.Errdif = %f\r\n",err_steering.Errdif);
   98   2          
   99   2          printf("temp = %f\r\n",temp);
  100   2          
  101   2          printf("pid_steering.PID_STEERING_OUT=%d \r \n", pid_steering.PID_STEERING_OUT);
  102   2          delay_ms(1000);
  103   2      
  104   2          // printf("SP_R = %d\r\n", speed_now.speed_R);        // 当前
  105   2          // printf("SP_RA = %d\r\n", speed_state.Strai_speed_R_ai); // 目标
  106   2          // printf("pwm = %d\r\n\r\n", PWM_Motor_R_now);
  107   2      
  108   2          //  printf("P = %f\r\n", pid_motor.p_motor);
  109   2          //  printf("I = %f\r\n", pid_motor.i_motor);
  110   2          // printf("D = %f\r\n\r\n", pid_motor.d_motor);
  111   2      
  112   2          // printf("PWM_L = %d \r\n\r\n", PWM_Motor_L_now);
  113   2          //  printf("PWM_R = %d \r\n\r\n", PWM_Motor_R_now);
  114   2          printf("\r\n\r\n");
  115   2        }
  116   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       503     ------
  ecode size           =    ------     ------
C251 COMPILER V5.60.0,  main                                                               17/03/23  22:09:03  PAGE 3   

  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        20     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       636     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
