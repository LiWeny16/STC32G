C251 COMPILER V5.60.0,  encoder                                                            19/03/23  18:33:24  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE encoder
OBJECT MODULE PLACED IN .\Out\encoder.obj
COMPILER INVOKED BY: C:\Learning\Keil_v5\body\C251\BIN\C251.EXE User\User_c\encoder.c XSMALL INTR2 BROWSE INCDIR(.\Lib\l
                    -ibraries;.\Lib\seekfree_libraries;.\Lib\seekfree_peripheral;.\User\User_h) DEBUG PRINT(.\Listings\encoder.lst) TABS(2) O
                    -BJECT(.\Out\encoder.obj) 

stmt  level    source

    1          //¸ÃÎÄ¼þÓÃÓÚ½«Ê¹ÓÃ±àÂëÆ÷²É¼¯µ½µÄÊý¾Ý×ª»¯ÎªËÙ¶È£¬²¢ÓëÆÚÍûËÙ¶È½øÐÐ±È½Ï£¬¼ÆËãµç»úÆ«²îÖµ£¬²¢½«ÏàÓ¦Êý¾ÝÂ¼Èëµç»
             -úÆ«²î½á¹¹ÌåÖÐ
    2          
    3          #include "encoder.h"
    4          
    5          void speedout(Road road,SPEED_now* speed_now,SPEED_state* speed_state)//¸ù¾ÝÂ·¿öÑ¡ÔñÄ¿±êËÙ¶È²¢½«Æä¸³¸øµ±Ç
             -°ËÙ¶È½á¹¹Ìå
    6          {
    7   1        switch(road)
    8   1        {
    9   2          case(Straight)://Ö±µÀ
   10   2          speed_now-> speed_L_ai = speed_state->Strai_speed_L_ai;
   11   2          speed_now-> speed_R_ai = speed_state->Strai_speed_R_ai;
   12   2          break;
   13   2          
   14   2          case(Curve)://ÍäµÀ
   15   2          speed_now-> speed_L_ai = speed_state->Cur_speed_L_ai;
   16   2          speed_now-> speed_R_ai = speed_state->Cur_speed_R_ai;
   17   2          break;
   18   2          
   19   2          case(Stop):
   20   2          speed_now-> speed_L_ai =0;
   21   2          speed_now-> speed_R_ai =0;
   22   2          default://±ðµÄ
   23   2          speed_now-> speed_L_ai = speed_state->Strai_speed_L_ai;
   24   2          speed_now-> speed_R_ai = speed_state->Strai_speed_R_ai;
   25   2          break;
   26   2        }
   27   1      }
   28          
   29          void speed_cal(SPEED_now* speed_now)//Í¨¹ý±àÂëÆ÷µÄÊý¾Ý¼ÆËãËÙ¶È£¬²¢½«ÆäÐ´Èëµ±Ç°ËÙ¶È½á¹¹Ìå
   30          {
   31   1        uint32 Speed_L = 0;
   32   1        uint32 Speed_R = 0;
   33   1        uint32 dat_L = 0 ;
   34   1        uint32 dat_R = 0 ;
   35   1        if(DIR_L == 1)//×óÂÖËÙ¶È
   36   1          {
   37   2            dat_L = ctimer_count_read(Encoder_L);
   38   2            Speed_L= MFBL*(dat_L/(CONTROL_T*DECO));//ÓÃ±àÂëÆ÷ÔÚÖÐ¶Ï¼ä¸ôÖ®ÄÚµÄ¶ÁÊý³ýÒÔÖ´ÐÐ³ÌÐòµÄÖÐ¶Ï¼ä¸ô¼°Ò»Ã×¶ÔÓ¦µ
             -ÄÂö³åÊýÀ´±íÊ¾µ±Ç°ËÙ¶È(m/s),ÒÑ³ËPID·Ö±æÂÊ
   39   2            //Speed_L = dat_L; //²âÊÔÓÃ
   40   2            //ÂË²¨
   41   2            Speed_L = Speed_L>1?Speed_L:1;
   42   2          }
   43   1          else
   44   1          {
   45   2            dat_L = ctimer_count_read(Encoder_L) * -1;
   46   2            Speed_L = (MFBL*(dat_L/(CONTROL_T*DECO))) * -1;//ÓÃ±àÂëÆ÷ÔÚÖÐ¶Ï¼ä¸ôÖ®ÄÚµÄ¶ÁÊý³ýÒÔÖ´ÐÐ³ÌÐòµÄÖÐ¶Ï¼ä¸ô¼°
             -Ò»Ã×¶ÔÓ¦µÄÂö³åÊýÀ´±íÊ¾µ±Ç°ËÙ¶È(m/s),ÒÑ³ËPID·Ö±æÂÊ
   47   2            //Speed_L = dat_L;
   48   2            Speed_L = Speed_L>1?Speed_L:1;
   49   2          }
   50   1      
   51   1          speed_now->speed_L = Speed_L;
   52   1          
   53   1          
C251 COMPILER V5.60.0,  encoder                                                            19/03/23  18:33:24  PAGE 2   

   54   1        if(DIR_R == 0)//ÓÒÂÖËÙ¶È
   55   1          {
   56   2            dat_R = ctimer_count_read(Encoder_R);
   57   2            Speed_R = MFBL*(dat_R/(CONTROL_T*DECO));//ÓÃ±àÂëÆ÷ÔÚÖÐ¶Ï¼ä¸ôÖ®ÄÚµÄ¶ÁÊý³ýÒÔÖ´ÐÐ³ÌÐòµÄÖÐ¶Ï¼ä¸ô¼°Ò»Ã×¶ÔÓ¦
             -µÄÂö³åÊýÀ´±íÊ¾µ±Ç°ËÙ¶È(m/s),ÒÑ³ËPID·Ö±æÂÊ
   58   2            //Speed_R = dat_R;
   59   2            Speed_R = Speed_R>1?Speed_R:1;
   60   2          }
   61   1          else
   62   1          {
   63   2            dat_R = ctimer_count_read(Encoder_R) * -1;
   64   2            Speed_R = (MFBL*(dat_R/(CONTROL_T*DECO))) * -1;//ÓÃ±àÂëÆ÷ÔÚÖÐ¶Ï¼ä¸ôÖ®ÄÚµÄ¶ÁÊý³ýÒÔÖ´ÐÐ³ÌÐòµÄÖÐ¶Ï¼ä¸ô¼°Ò
             -»Ã×¶ÔÓ¦µÄÂö³åÊýÀ´±íÊ¾µ±Ç°ËÙ¶È(m/s),ÒÑ³ËPID·Ö±æÂÊ
   65   2            //Speed_R = dat_R;
   66   2            Speed_R = Speed_R>1?Speed_R:1;
   67   2          }
   68   1      
   69   1          speed_now->speed_R = Speed_R;
   70   1          ctimer_count_clean(Encoder_R);
   71   1          ctimer_count_clean(Encoder_L);
   72   1      }
   73          
   74          
   75          void calculate_err_m(SPEED_now* speed_now,Err_Motor* err_Mot)//Í¨¹ý×óÂÖºÍÓÒÂÖËÙ¶È¼ÆËãËùÐèµÄÔöÁ¿Ê½PIDÎó²îÖ
             -µ£¬½«ÆäÐ´Èëµç»úÎó²î½á¹¹Ìå£¬²¢¸üÐÂÏàÓ¦µÄËùÐèÎó²îÖµ
   76          {
   77   1        err_Mot->err_L_m = speed_now->speed_L_ai - speed_now->speed_L;
   78   1        err_Mot->err_R_m = speed_now->speed_R_ai - speed_now->speed_R;
   79   1        
   80   1        err_Mot->err_derivative_L_m = err_Mot->err_L_m - err_Mot->err_last_L_m;//±¾´ÎÎó²îÓëÉÏ´ÎÎó²îÖ®²î
   81   1        err_Mot->err_derivative_R_m = err_Mot->err_R_m - err_Mot->err_last_R_m;
   82   1        
   83   1        err_Mot->err_derivative2_L_m = err_Mot->err_last_L_m - err_Mot->err_past_L_m;//ÉÏ´ÎÎó²îºÍÉÏÉÏ´ÎÎó²îÖ®²î
   84   1        err_Mot->err_derivative2_R_m = err_Mot->err_last_R_m - err_Mot->err_past_R_m;
   85   1        
   86   1        err_Mot->err_past_L_m = err_Mot->err_last_L_m;
   87   1        err_Mot->err_last_L_m = err_Mot->err_L_m;//×óÂÖÊý¾Ý¸üÐÂ
   88   1        
   89   1        err_Mot->err_past_R_m = err_Mot->err_last_R_m;
   90   1        err_Mot->err_last_R_m = err_Mot->err_R_m;//ÓÒÂÖÊý¾Ý¸üÐÂ
   91   1        
   92   1      }
   93          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       675     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         20
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
