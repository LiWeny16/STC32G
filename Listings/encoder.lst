C251 COMPILER V5.60.0,  encoder                                                            22/03/23  18:05:15  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE encoder
OBJECT MODULE PLACED IN .\Out\encoder.obj
COMPILER INVOKED BY: C:\Learning\Keil_v5\body\C251\BIN\C251.EXE User\User_c\encoder.c XSMALL INTR2 BROWSE INCDIR(.\Lib\l
                    -ibraries;.\Lib\seekfree_libraries;.\Lib\seekfree_peripheral;.\User\User_h) DEBUG PRINT(.\Listings\encoder.lst) TABS(2) O
                    -BJECT(.\Out\encoder.obj) 

stmt  level    source

    1          //¸ÃÎÄ¼þÓÃÓÚ½«Ê¹ÓÃ±àÂëÆ÷²É¼¯µ½µÄÊý¾Ý×ª»¯ÎªËÙ¶È£¬²¢ÓëÆÚÍûËÙ¶È½øÐÐ±È½Ï£¬¼ÆËãµç»úÆ«²îÖµ£¬²¢½«ÏàÓ¦Êý¾ÝÂ¼Èëµç»
             -úÆ«²î½á¹¹ÌåÖÐ
    2          
    3          #include "encoder.h"
    4          
    5          void speedout(Road road,SPEED_now* speed_now,SPEED_state* speed_state)//¸ù¾ÝÂ·¿öÑ¡ÔñÄ¿±êËÙ¶È²¢½«Æä¸³¸øµ±Ç
             -°ËÙ¶È½á¹¹Ìå
    6          {
    7   1        switch(road)
    8   1        {
    9   2          case(Straight)://Ö±µÀ
   10   2          speed_now-> speed_L_ai = speed_state->Strai_speed_L_ai;
   11   2          speed_now-> speed_R_ai = speed_state->Strai_speed_R_ai;
   12   2          break;
   13   2          
   14   2          case(Curve_Left)://×óÍäµÀ
   15   2          speed_now-> speed_L_ai = speed_state->Cur_L_speed_L_ai;
   16   2          speed_now-> speed_R_ai = speed_state->Cur_L_speed_R_ai;
   17   2          break;
   18   2          
   19   2          case(Curve_Right)://ÓÒÍäµÀ
   20   2          speed_now-> speed_L_ai = speed_state->Cur_R_speed_L_ai;
   21   2          speed_now-> speed_R_ai = speed_state->Cur_R_speed_R_ai;
   22   2          break;
   23   2          case(Big_Ring): //´óÔ²»·ÄÚ
   24   2          speed_now-> speed_L_ai = speed_state->Ring_speed_L_ai;
   25   2          speed_now-> speed_R_ai = speed_state->Ring_speed_R_ai;
   26   2            break;
   27   2          
   28   2          case(Ring_In): //½ø´óÔ²»·
   29   2          speed_now-> speed_L_ai = speed_state->Ringin_speed_L_ai;
   30   2          speed_now-> speed_R_ai = speed_state->Ringin_speed_R_ai;
   31   2            break;
   32   2          
   33   2          case(Ring_Out): //³ö´óÔ²»·
   34   2          speed_now-> speed_L_ai = speed_state->Ringout_speed_L_ai;
   35   2          speed_now-> speed_R_ai = speed_state->Ringout_speed_R_ai;
   36   2            break;
   37   2          
   38   2          case(Stop):
   39   2          speed_now-> speed_L_ai =0;
   40   2          speed_now-> speed_R_ai =0;
   41   2          default://±ðµÄÄ¬ÈÏ
   42   2          speed_now-> speed_L_ai = speed_state->Strai_speed_L_ai;
   43   2          speed_now-> speed_R_ai = speed_state->Strai_speed_R_ai;
   44   2          break;
   45   2        }
   46   1      }
   47          
   48          void speed_cal(SPEED_now* speed_now)//Í¨¹ý±àÂëÆ÷µÄÊý¾Ý¼ÆËãËÙ¶È£¬²¢½«ÆäÐ´Èëµ±Ç°ËÙ¶È½á¹¹Ìå
   49          {
   50   1        uint32 Speed_L = 0;
   51   1        uint32 Speed_R = 0;
   52   1        uint32 dat_L = 0 ;
   53   1        uint32 dat_R = 0 ;
   54   1        if(DIR_L == 1)//×óÂÖËÙ¶È
   55   1          {
C251 COMPILER V5.60.0,  encoder                                                            22/03/23  18:05:15  PAGE 2   

   56   2            dat_L = ctimer_count_read(Encoder_L);
   57   2            Speed_L= MFBL*(dat_L/(CONTROL_T*DECO));//ÓÃ±àÂëÆ÷ÔÚÖÐ¶Ï¼ä¸ôÖ®ÄÚµÄ¶ÁÊý³ýÒÔÖ´ÐÐ³ÌÐòµÄÖÐ¶Ï¼ä¸ô¼°Ò»Ã×¶ÔÓ¦µ
             -ÄÂö³åÊýÀ´±íÊ¾µ±Ç°ËÙ¶È(m/s),ÒÑ³ËPID·Ö±æÂÊ
   58   2            //Speed_L = dat_L; //²âÊÔÓÃ
   59   2            //ÂË²¨
   60   2            Speed_L = Speed_L>1?Speed_L:1;
   61   2          }
   62   1          else
   63   1          {
   64   2            dat_L = ctimer_count_read(Encoder_L) * -1;
   65   2            Speed_L = (MFBL*(dat_L/(CONTROL_T*DECO))) * -1;//ÓÃ±àÂëÆ÷ÔÚÖÐ¶Ï¼ä¸ôÖ®ÄÚµÄ¶ÁÊý³ýÒÔÖ´ÐÐ³ÌÐòµÄÖÐ¶Ï¼ä¸ô¼°
             -Ò»Ã×¶ÔÓ¦µÄÂö³åÊýÀ´±íÊ¾µ±Ç°ËÙ¶È(m/s),ÒÑ³ËPID·Ö±æÂÊ
   66   2            //Speed_L = dat_L;
   67   2            Speed_L = Speed_L>1?Speed_L:1;
   68   2          }
   69   1      
   70   1          speed_now->speed_L = Speed_L;
   71   1          
   72   1          
   73   1        if(DIR_R == 0)//ÓÒÂÖËÙ¶È
   74   1          {
   75   2            dat_R = ctimer_count_read(Encoder_R);
   76   2            Speed_R = MFBL*(dat_R/(CONTROL_T*DECO));//ÓÃ±àÂëÆ÷ÔÚÖÐ¶Ï¼ä¸ôÖ®ÄÚµÄ¶ÁÊý³ýÒÔÖ´ÐÐ³ÌÐòµÄÖÐ¶Ï¼ä¸ô¼°Ò»Ã×¶ÔÓ¦
             -µÄÂö³åÊýÀ´±íÊ¾µ±Ç°ËÙ¶È(m/s),ÒÑ³ËPID·Ö±æÂÊ
   77   2            //Speed_R = dat_R;
   78   2            Speed_R = Speed_R>1?Speed_R:1;
   79   2          }
   80   1          else
   81   1          {
   82   2            dat_R = ctimer_count_read(Encoder_R) * -1;
   83   2            Speed_R = (MFBL*(dat_R/(CONTROL_T*DECO))) * -1;//ÓÃ±àÂëÆ÷ÔÚÖÐ¶Ï¼ä¸ôÖ®ÄÚµÄ¶ÁÊý³ýÒÔÖ´ÐÐ³ÌÐòµÄÖÐ¶Ï¼ä¸ô¼°Ò
             -»Ã×¶ÔÓ¦µÄÂö³åÊýÀ´±íÊ¾µ±Ç°ËÙ¶È(m/s),ÒÑ³ËPID·Ö±æÂÊ
   84   2            //Speed_R = dat_R;
   85   2            Speed_R = Speed_R>1?Speed_R:1;
   86   2          }
   87   1      
   88   1          speed_now->speed_R = Speed_R;
   89   1          ctimer_count_clean(Encoder_R);
   90   1          ctimer_count_clean(Encoder_L);
   91   1      }
   92          
   93          
   94          void calculate_err_m(SPEED_now* speed_now,Err_Motor* err_Mot)//Í¨¹ý×óÂÖºÍÓÒÂÖËÙ¶È¼ÆËãËùÐèµÄÔöÁ¿Ê½PIDÎó²îÖ
             -µ£¬½«ÆäÐ´Èëµç»úÎó²î½á¹¹Ìå£¬²¢¸üÐÂÏàÓ¦µÄËùÐèÎó²îÖµ
   95          {
   96   1        err_Mot->err_L_m = speed_now->speed_L_ai - speed_now->speed_L;
   97   1        err_Mot->err_R_m = speed_now->speed_R_ai - speed_now->speed_R;
   98   1        
   99   1        err_Mot->err_derivative_L_m = err_Mot->err_L_m - err_Mot->err_last_L_m;//±¾´ÎÎó²îÓëÉÏ´ÎÎó²îÖ®²î
  100   1        err_Mot->err_derivative_R_m = err_Mot->err_R_m - err_Mot->err_last_R_m;
  101   1        
  102   1        err_Mot->err_derivative2_L_m = err_Mot->err_last_L_m - err_Mot->err_past_L_m;//ÉÏ´ÎÎó²îºÍÉÏÉÏ´ÎÎó²îÖ®²î
  103   1        err_Mot->err_derivative2_R_m = err_Mot->err_last_R_m - err_Mot->err_past_R_m;
  104   1        
  105   1        err_Mot->err_past_L_m = err_Mot->err_last_L_m;
  106   1        err_Mot->err_last_L_m = err_Mot->err_L_m;//×óÂÖÊý¾Ý¸üÐÂ
  107   1        
  108   1        err_Mot->err_past_R_m = err_Mot->err_last_R_m;
  109   1        err_Mot->err_last_R_m = err_Mot->err_R_m;//ÓÒÂÖÊý¾Ý¸üÐÂ
  110   1        
  111   1      }
  112          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       842     ------
C251 COMPILER V5.60.0,  encoder                                                            22/03/23  18:05:15  PAGE 3   

  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------         20
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
