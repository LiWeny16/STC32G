C251 COMPILER V5.60.0,  adc                                                                31/03/23  21:15:38  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE adc
OBJECT MODULE PLACED IN .\Out\adc.obj
COMPILER INVOKED BY: C:\Learning\Keil_v5\body\C251\BIN\C251.EXE User\User_c\adc.c XSMALL INTR2 BROWSE INCDIR(.\Lib\libra
                    -ries;.\Lib\seekfree_libraries;.\Lib\seekfree_peripheral;.\User\User_h) DEBUG PRINT(.\Listings\adc.lst) TABS(2) OBJECT(.\
                    -Out\adc.obj) 

stmt  level    source

    1          // ¸ÃÎÄ¼þÓÃÓÚ½«Ê¹ÓÃADC²É¼¯µ½µÄµç¸ÐÊä³öÖµ±ä»¯Îª¶æ»úÆ«²îÖµ£¬²¢½«ÏàÓ¦Êý¾ÝÂ¼Èë¶æ»úÆ«²î½á¹¹ÌåÖÐ
    2          
    3          #include "adc.h"
    4          
    5          void calculate_s(DG_State *dg, Err_Steering *Err_Ste) // ¸ù¾Ýµç¸Ð×´Ì¬¼ÆËãÆ«²îÖµ£¬²¢¸üÐÂÆ«²îÖµ½á¹¹ÌåÖÐlast
             -Á¿£¬½á¹û±£´æÔÚ¶æ»úÆ«²îÖµ½á¹¹ÌåÖÐ
    6          {
    7   1        //
    8   1        
    9   1        dg->L_yx_max = 4096.0;
   10   1        dg->L_yh_max = 4096.0;
   11   1        dg->L_zx_max = 4096.0;
   12   1        dg->L_zh_max = 4096.0;
   13   1        //
   14   1        dg->L_zx_real = (ADC_ReadAverage(ZX, count_dg, RE));
   15   1        dg->L_zh_real = (ADC_ReadAverage(ZH, count_dg, RE)); // ×î´óÖµ255
   16   1      
   17   1        //  dg->L_zs_real = (ADC_ReadAverage(ZS, count_dg, RE));//Ã»ÓÃ
   18   1        //  dg->L_ys_real = (ADC_ReadAverage(YS, count_dg, RE));//Ã»ÓÃ
   19   1      
   20   1        dg->L_yh_real = (ADC_ReadAverage(YH, count_dg, RE)); // ×î´óÖµ255
   21   1        dg->L_yx_real = (ADC_ReadAverage(YX, count_dg, RE));
   22   1        // ÇóÈ¡10´Î²ÉÑùÆ½¾ùÖµ×÷ÎªÕæÊµÖµ
   23   1      
   24   1        dg->L_zx_real = dg->L_zx_real >= 1 ? dg->L_zx_real : 1;
   25   1        dg->L_zh_real = dg->L_zh_real >= 1 ? dg->L_zh_real : 1;
   26   1        // dg->L_zs_real = dg->L_zs_real >= 1 ? dg->L_zs_real : 1;//Ã»ÓÃ
   27   1        // dg->L_ys_real = dg->L_ys_real >= 1 ? dg->L_ys_real : 1;//Ã»ÓÃ
   28   1        dg->L_yh_real = dg->L_yh_real >= 1 ? dg->L_yh_real : 1;
   29   1        dg->L_yx_real = dg->L_yx_real >= 1 ? dg->L_yx_real : 1;
   30   1        // Ê¹²ÉÑù×îÐ¡ÖµÎª1
   31   1      
   32   1        // dg->L_zx_once = (sqrt((()dg->L_zx_real) / (dg->L_zx_max)));
   33   1        // dg->L_zh_once = (sqrt((()dg->L_zh_real) / (dg->L_zh_max)));
   34   1        // dg->L_zs_once = (sqrt((()dg->L_zs_real) / (dg->L_zs_max)));//Ã»ÓÃ
   35   1        // dg->L_ys_once = (sqrt((()dg->L_ys_real) / (dg->L_ys_max)));//Ã»ÓÃ
   36   1        // dg->L_yh_once = (sqrt((()dg->L_yh_real) / (dg->L_yh_max)));
   37   1        // dg->L_yx_once = (sqrt((()dg->L_yx_real) / (dg->L_yx_max)));
   38   1        dg->L_zx_once = (((float)dg->L_zx_real) / (dg->L_zx_max));
   39   1        dg->L_zh_once = (((float)dg->L_zh_real) / (dg->L_zh_max));
   40   1        dg->L_yh_once = (((float)dg->L_yh_real) / (dg->L_yh_max));
   41   1        dg->L_yx_once = (((float)dg->L_yx_real) / (dg->L_yx_max));
   42   1        // µÚÒ»´Î¹éÒ»»¯£¬Ê¹µÃµç¸Ð¾àÀëµç¸Ð×î´óÖµ´¦µÄÎÇºÏ¶ÈÓÃ°Ù·Ö±È±íÊ¾£¬²¢¿ª·½Ê¹µÃÆ«²îºÍÐ¡³µÆ«ÀëÈüµÀµÄ¾àÀë³Éµ¥µ÷
             -¹ØÏµ£¨¼´Ïû³ý¼«µã£©£¬Ê¹µÃ¶ªÏß¸üºÃÅÐ¶Ï
   43   1      
   44   1        // dg->L_zx_twice = (dg->L_zx_once) / (dg->L_zx_once * dg->L_zx_once + dg->L_yx_once * dg->L_yx_once + 
             -dg->L_zh_once * dg->L_zh_once + dg->L_yh_once * dg->L_yh_once);
   45   1        // dg->L_zh_twice = (dg->L_zh_once) / (dg->L_zx_once * dg->L_zx_once + dg->L_yx_once * dg->L_yx_once + 
             -dg->L_zh_once * dg->L_zh_once + dg->L_yh_once * dg->L_yh_once);
   46   1        // dg->L_yh_twice = (dg->L_yh_once) / (dg->L_zx_once * dg->L_zx_once + dg->L_yx_once * dg->L_yx_once + 
             -dg->L_zh_once * dg->L_zh_once + dg->L_yh_once * dg->L_yh_once);
   47   1        // dg->L_yx_twice = (dg->L_yx_once) / (dg->L_zx_once * dg->L_zx_once + dg->L_yx_once * dg->L_yx_once + 
             -dg->L_zh_once * dg->L_zh_once + dg->L_yh_once * dg->L_yh_once);
   48   1        // µÚ¶þ´Î¹éÒ»»¯£¬ÇóÈ¡ºáµç¸ÐºÍÐ±µç¸ÐÆ«²îÖµÕ¼×ÜµÄ°Ù·Ö±È
   49   1      
   50   1        // Err_Ste->Err_x = dg->L_zx_twice - dg->L_yx_twice;
   51   1        // Err_Ste->Err_h = dg->L_zh_twice - dg->L_yh_twice;
C251 COMPILER V5.60.0,  adc                                                                31/03/23  21:15:38  PAGE 2   

   52   1        // Err_Ste->Err = (-0.6151 * (Err_Ste->Err_x)) + (3.3868 * (Err_Ste->Err_h));
   53   1        // // ÒÔÉÏÏµÊýÊ¹ÓÃmatlabÄâºÏ£¬Ê¹µÃÆ«²îºÍÐ¡³µÆ«ÀëÈüµÀµÄ¾àÀë³ÉÏßÐÔ¹ØÏµ£¬ÖÁ´Ë£¬Æ«²îºÍÐ¡³µÆ«ÀëÈüµÀµÄ¾àÀë³Éµ
             -¥µ÷ÏßÐÔ¹ØÏµ
   54   1        // Err_Ste->Errsum += Err_Ste->Err;
   55   1        // Err_Ste->Errdif = Err_Ste->Err - Err_Ste->Err_last;
   56   1        // // Î»ÖÃÊ½PID»ý·ÖºÍ²î·ÖÔËËã
   57   1        // Err_Ste->Err_x_last = Err_Ste->Err_x;
   58   1        // Err_Ste->Err_h_last = Err_Ste->Err_h;
   59   1        // Err_Ste->Err_last = Err_Ste->Err;
   60   1      
   61   1        Err_Ste->Err_x = (dg->L_zx_once - dg->L_yx_once);
   62   1        Err_Ste->Err_h = (dg->L_zh_once - dg->L_yh_once);
   63   1        Err_Ste->Err_x=  Err_Ste->Err_x>1?1: Err_Ste->Err_x;
   64   1        Err_Ste->Err_h=  Err_Ste->Err_h>1?1: Err_Ste->Err_h;
   65   1        Err_Ste->Err_x=  Err_Ste->Err_x<(-1)?(-1): Err_Ste->Err_x;
   66   1        Err_Ste->Err_h=  Err_Ste->Err_h<(-1)?(-1): Err_Ste->Err_h;
   67   1        
   68   1        Err_Ste->Err = (1.1151 * (Err_Ste->Err_x)) + (3.9868 * (Err_Ste->Err_h));
   69   1        // ÒÔÉÏÏµÊýÊ¹ÓÃmatlabÄâºÏ£¬Ê¹µÃÆ«²îºÍÐ¡³µÆ«ÀëÈüµÀµÄ¾àÀë³ÉÏßÐÔ¹ØÏµ£¬ÖÁ´Ë£¬Æ«²îºÍÐ¡³µÆ«ÀëÈüµÀµÄ¾àÀë³Éµ¥µ÷
             -ÏßÐÔ¹ØÏµ
   70   1        //Err_Ste->Errsum = Err_Ste->Err;
   71   1        Err_Ste->Errdif = Err_Ste->Err - Err_Ste->Err_last;
   72   1        // Î»ÖÃÊ½PID»ý·ÖºÍ²î·ÖÔËËã
   73   1       // Err_Ste->Err_x_last = Err_Ste->Err_x;
   74   1       // Err_Ste->Err_h_last = Err_Ste->Err_h;
   75   1        Err_Ste->Err_last = Err_Ste->Err;
   76   1      
   77   1        // Æ«²îÖµ¸üÐÂ
   78   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       660     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------          4
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
